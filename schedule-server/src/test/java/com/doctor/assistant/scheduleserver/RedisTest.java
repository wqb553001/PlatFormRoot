package com.doctor.assistant.scheduleserver;////import com.doctor.assistant.scheduleserver.manager.MyJob;//import org.quartz.CronTrigger;//import org.quartz.JobDetail;//import org.quartz.Scheduler;//import org.quartz.SchedulerFactory;//import org.quartz.impl.StdSchedulerFactory;//import org.springframework.boot.test.context.SpringBootTest;////import java.text.SimpleDateFormat;//import java.util.Date;import com.doctor.assistant.commonserver.entity.User;import com.doctor.assistant.scheduleserver.manager.ThreadA;import com.doctor.assistant.scheduleserver.server.RedisService;import org.junit.Test;import org.junit.runner.RunWith;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.test.context.junit4.SpringRunner;import javax.annotation.Resource;import java.io.Serializable;@RunWith(SpringRunner.class)@SpringBootTestpublic class RedisTest {    private Logger logger = LoggerFactory.getLogger(RedisTest.class);//    @Resource(name = "lettuceRedisTemplate")    @Resource(name = "jedisRedisTemplate")    private RedisTemplate<String, Serializable> redisTemplate;    @Test    public void test() {        String key = "user:1";        redisTemplate.opsForValue().set(key, new User("userA",20,"pjmike"));        User user = (User) redisTemplate.opsForValue().get(key);        logger.info("uesr: "+user.toString());    }    @Test    public void test2(){        RedisService redisService = new RedisService();        for (int i = 0; i < 50; i++) {            ThreadA threadA = new ThreadA(redisService);            threadA.start();        }    }//    public void go() throws Exception {//        // 首先，必需要取得一个Scheduler的引用//        SchedulerFactory sf = new StdSchedulerFactory();//        Scheduler sched = sf.getScheduler();//        String time="0 51 11 ? * *";//        // jobs可以在scheduled的sched.start()方法前被调用////        // job 1将每隔20秒执行一次//        JobDetail job = new JobDetail("job1", "group1", MyJob.class);//        CronTrigger trigger = new CronTrigger("trigger1", "group1");//        trigger.setCronExpression(time);//        Date ft = sched.scheduleJob(job, trigger);//        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss SSS");//        System.out.println(//                job.getKey() + " 已被安排执行于: " + sdf.format(ft) + "，并且以如下重复规则重复执行: " + trigger.getCronExpression());////        // job 2将每2分钟执行一次（在该分钟的第15秒)//        job = new JobDetail("job2", "group1", MyJob.class);//        trigger = new CronTrigger("trigger2", "group1");//        trigger.setCronExpression(time);//        ft = sched.scheduleJob(job, trigger);//        System.out.println(//                job.getKey() + " 已被安排执行于: " + sdf.format(ft) + "，并且以如下重复规则重复执行: " + trigger.getCronExpression());////        // 开始执行，start()方法被调用后，计时器就开始工作，计时调度中允许放入N个Job//        sched.start();//        try {//            // 主线程等待一分钟//            Thread.sleep(60L * 1000L);//        } catch (Exception e) {//        }//        // 关闭定时调度，定时器不再工作//        sched.shutdown(true);//    }////    public static void main(String[] args) throws Exception {////        Test test = new Test();//        test.go();//    }//}