package com.doctor.assistant.scheduleserver.config;import com.fasterxml.jackson.annotation.JsonAutoDetect;import com.fasterxml.jackson.annotation.PropertyAccessor;import com.fasterxml.jackson.databind.ObjectMapper;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Qualifier;import org.springframework.boot.autoconfigure.data.redis.RedisProperties;import org.springframework.boot.web.client.RestTemplateBuilder;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.data.redis.connection.RedisConnectionFactory;import org.springframework.data.redis.connection.RedisPassword;import org.springframework.data.redis.connection.RedisStandaloneConfiguration;import org.springframework.data.redis.connection.jedis.JedisConnectionFactory;import org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.data.redis.core.StringRedisTemplate;import org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;import org.springframework.data.redis.serializer.StringRedisSerializer;import org.springframework.web.client.RestTemplate;import java.io.Serializable;@Configurationpublic class RedisConfig {    @Autowired    private RedisProperties redisProperties;    @Bean(name = "jedisConnectionFactory")    public JedisConnectionFactory jedisConnectionFactory() {        RedisStandaloneConfiguration config = new RedisStandaloneConfiguration();        config.setHostName(redisProperties.getHost());        config.setPort(redisProperties.getPort());        config.setPassword(RedisPassword.of(redisProperties.getPassword()));        JedisConnectionFactory connectionFactory = new JedisConnectionFactory(config);        return connectionFactory;    }//    @Bean(name = "jedisRedisTemplate")//    public RedisTemplate<String, Serializable> redisTemplate(@Qualifier(value = "jedisConnectionFactory") JedisConnectionFactory connectionFactory) {//        RedisTemplate<String, Serializable> redisTemplate = new RedisTemplate<>();//        redisTemplate.setKeySerializer(new StringRedisSerializer());//        redisTemplate.setValueSerializer(new GenericJackson2JsonRedisSerializer());//        redisTemplate.setConnectionFactory(connectionFactory);//        return redisTemplate;//    }    @Bean(name = "jedisRedisTemplate")    public RedisTemplate redisTemplate(@Qualifier(value = "jedisConnectionFactory") JedisConnectionFactory connectionFactory) {        StringRedisTemplate template = new StringRedisTemplate(connectionFactory);        @SuppressWarnings({ "rawtypes", "unchecked" })        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);        ObjectMapper om = new ObjectMapper();        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);        jackson2JsonRedisSerializer.setObjectMapper(om);        template.setValueSerializer(jackson2JsonRedisSerializer);        template.afterPropertiesSet();        return template;    }}