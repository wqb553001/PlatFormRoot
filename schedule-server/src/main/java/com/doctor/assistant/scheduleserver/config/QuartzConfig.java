package com.doctor.assistant.scheduleserver.config;//import com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceBuilder;//import org.springframework.boot.autoconfigure.quartz.QuartzDataSource;//import org.springframework.boot.context.properties.ConfigurationProperties;//import org.springframework.context.annotation.Bean;import org.quartz.Scheduler;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Qualifier;import org.springframework.boot.autoconfigure.quartz.QuartzDataSource;import org.springframework.boot.autoconfigure.quartz.QuartzProperties;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.context.ApplicationContext;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.scheduling.quartz.SchedulerFactoryBean;import org.springframework.scheduling.quartz.SpringBeanJobFactory;import javax.sql.DataSource;import java.util.Properties;@Configurationpublic class QuartzConfig {    @Autowired    ApplicationContext applicationContext;    @Autowired    QuartzProperties quartzProperties;    @Bean    @QuartzDataSource    @ConfigurationProperties(prefix = "spring.datasource")    DataSource quartzDataSource(){        return org.springframework.boot.jdbc.DataSourceBuilder.create().build();    }    @Bean    public SchedulerFactoryBean schedulerFactoryBean(@Qualifier(value = "quartzDataSource")DataSource quartzDataSource) {        SchedulerFactoryBean schedulerFactoryBean = new SchedulerFactoryBean();        SpringBeanJobFactory jobFactory = new SpringBeanJobFactory();        jobFactory.setApplicationContext(this.applicationContext);        schedulerFactoryBean.setJobFactory(jobFactory);        // 用于quartz集群,QuartzScheduler 启动时更新己存在的Job        schedulerFactoryBean.setOverwriteExistingJobs(true);        schedulerFactoryBean.setDataSource(quartzDataSource);        //延长启动        schedulerFactoryBean.setStartupDelay(1);        //设置加载的配置文件        Properties mergedProps = new Properties();      // Change QuartzProperties to Properties, although it looks strange        mergedProps.putAll(quartzProperties.getProperties());        schedulerFactoryBean.setQuartzProperties(mergedProps);        return schedulerFactoryBean;    }    @Bean    public Scheduler scheduler(@Qualifier(value = "schedulerFactoryBean")SchedulerFactoryBean schedulerFactoryBean) {        return schedulerFactoryBean.getScheduler();    }}