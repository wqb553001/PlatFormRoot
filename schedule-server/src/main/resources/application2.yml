server:    port: 8086spring:    application:        name: schedule-server    datasource:        username: root        password: root        url: jdbc:mysql://localhost:3306/platform_manager?useUnicode=true&characterEncoding=utf-8&useSSL=true&serverTimezone=UTC&nullCatalogMeansCurrent=true        driver-class-name: com.mysql.cj.jdbc.Driver        type: com.alibaba.druid.pool.DruidDataSource        initialization-mode: always        initialSize: 5        minIdle: 5        maxActive: 20        maxWait: 60000        timeBetweenEvictionRunsMillis: 60000        minEvictableIdleTimeMillis: 300000        validationQuery: SELECT 1 FROM DUAL        testWhileIdle: true        testOnBorrow: false        testOnReturn: false        poolPreparedStatements: true        # filters: stat,wall,log4j        # maxPoolPreparedStatementPerConnectionSize: 20        # useGlobalDataSourceStat: true        # connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500    jpa:        # 在 SrpingBoot 2.0 版本中，Hibernate 创建数据表的时候，默认的数据库存储引擎选择的是 MyISAM        #（之前好像是 InnoDB，这点比较诡异）。这个参数是在建表的时候，将默认的存储引擎切换为 InnoDB 用的。        database-platform: org.hibernate.dialect.MySQL5InnoDBDialect        # spring.jpa.show-sql=true 配置在日志中打印出执行的 SQL 语句信息。        show-sql: true        # 配置指明在程序启动的时候要删除并且创建实体类对应的表。        # create 这个参数很危险，因为他会把对应的表删除掉然后重建。所以千万不要在生成环境中使用。只有在测试环境中，一开始初始化数据库结构的时候才能使用一次。        # ddl-auto:create----每次运行该程序，没有表格会新建表格，表内有数据会清空        # ddl-auto:create-drop----每次程序结束的时候会清空表        # ddl-auto:update----每次运行程序，没有表格会新建表格，表内有数据不会清空，只会更新(推荐)        # ddl-auto:validate----运行程序会校验数据与数据库的字段类型是否相同，不同会报错        hibernate:            ddl-auto: validate#        properties:#            hibernate:#                enable_lazy_load_no_trans: true#                cache:#                    ## 开启二级缓存#                    use_second_level_cache: true#                    ## 查询缓存#                    use_query_cache: true#                    ## RedisRegionFactory#                    region:#                        factory_class: org.hibernate.cache.redis.hibernate52.SingletonRedisRegionFactory#                    ## 缓存标示前缀#                    region_prefix: hibernate#                    ## 结构化缓存实体#                    use_structured_entries: true#                    ## 配置文件路径#                    provider_configuration_file_resource_path: classpath:conf/hibernate-redis.properties#            redisson-config: classpath:conf/redisson.yaml#            redis:#                expiryInSeconds:#                    default: 120#                    hibernate:#                        common: 0#                        account: 1200    redis:        password:        lettuce:            shutdown-timeout: 100 # 关闭超时时间            pool:                max-active: 8 # 连接池最大连接数（使用负值表示没有限制）                max-idle: 8 # 连接池中的最大空闲连接                max-wait: 30 # 连接池最大阻塞等待时间（使用负值表示没有限制）                min-idle: 0 # 连接池中的最小空闲连接    mvc:        view:            prefix: /            suffix: /    http:        encoding:            force: true            charset: utf-8            enabled: true    quartz:        job-store-type: jdbc #持久化到数据库        #初始化表结构        jdbc:            initialize-schema: always        #相关属性配置        properties:            org:                quartz:                    scheduler:                        instanceName: DefaultQuartzScheduler                        instanceId: AUTO                    jobStore:                        #数据保存方式为持久化                        class: org.quartz.impl.jdbcjobstore.JobStoreTX                        driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate                        #quartz内部表的前缀                        tablePrefix: qrtz_                        #是否加入集群                        isClustered: false                        clusterCheckinInterval: 10000                        useProperties: true                    threadPool:                        class: org.quartz.simpl.SimpleThreadPool                        threadCount: 10                        threadPriority: 5                        threadsInheritContextClassLoaderOfInitializingThread: truelogging:    level:        com.ascendant: debugeureka:    instance:        hostname: localhost    client:        service-url:            defaultZone: http://localhost:8761/eureka/