package com.activitiserver.config;import com.alibaba.druid.pool.DruidDataSource;import org.apache.ibatis.session.SqlSessionFactory;import org.mybatis.spring.SqlSessionFactoryBean;import org.mybatis.spring.SqlSessionTemplate;import org.springframework.beans.factory.annotation.Qualifier;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.context.annotation.Primary;import org.springframework.jdbc.datasource.DataSourceTransactionManager;import javax.sql.DataSource;@Configurationpublic class ActivitiDataSourceConfig {    /**     * 数据源-activitiDataSource     * @return     */    @ConfigurationProperties(prefix = "spring.datasource.activiti")    @Bean(name = "activitiDataSource")    @Primary // Primary可以理解为默认优先选择,同时不可以同时设置多个,内部实质是设置BeanDefinition的primary属性    public DataSource activitiDataSource(){        return new DruidDataSource();    }    @Bean(name = "activitiSqlSessionFactory")    @Primary // Primary可以理解为默认优先选择,同时不可以同时设置多个,内部实质是设置BeanDefinition的primary属性    public SqlSessionFactory activitiSqlSessionFactory(@Qualifier("activitiDataSource") DataSource dataSource) throws Exception{        SqlSessionFactoryBean sqlSessionFactoryBean = new SqlSessionFactoryBean();        sqlSessionFactoryBean.setDataSource(dataSource);        return sqlSessionFactoryBean.getObject();    }    @Bean(name = "activitiDataSourceTransactionManager")    @Primary // Primary可以理解为默认优先选择,同时不可以同时设置多个,内部实质是设置BeanDefinition的primary属性    public DataSourceTransactionManager activitiDataSourceTransactionManager(@Qualifier("activitiDataSource") DataSource dataSource){        DataSourceTransactionManager transactionManager = new DataSourceTransactionManager(dataSource);        return transactionManager;    }    @Bean(name = "activitiSqlSessionTemplate")    @Primary // Primary可以理解为默认优先选择,同时不可以同时设置多个,内部实质是设置BeanDefinition的primary属性    public SqlSessionTemplate activitiSqlSessionTemplate(@Qualifier("activitiSqlSessionFactory") SqlSessionFactory activitiSqlSessionFactory){        return new SqlSessionTemplate(activitiSqlSessionFactory);    }}