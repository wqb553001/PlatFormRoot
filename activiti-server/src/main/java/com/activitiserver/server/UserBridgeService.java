package com.activitiserver.server;import com.activitiserver.feignclient.UserActivitiFromService;import com.doctor.assistant.commonserver.utils.JsonUtils;import com.doctor.assistant.userserver.springdata.entity.TSUser;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.core.authority.SimpleGrantedAuthority;import org.springframework.security.core.userdetails.User;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.provisioning.UserDetailsManager;import org.springframework.stereotype.Service;import javax.annotation.Resource;import java.util.List;import java.util.stream.Collectors;@Servicepublic class UserBridgeService {    @Resource(name = "jdbcLocalUserDetailsManager")    UserDetailsManager jdbcLocalUserDetailsManager;    @Autowired    UserActivitiFromService userActivitiFromService;    private static String accountbookId = "2c91e3ec6ad89cfb016ae4657a010362"; 		// 110100掌上纵横    private static final String departDetailId = "2c91e3ec6ad89cfb016ae4657a0c0368";    private static final String GROUP_ = "GROUP_";    private static final String ROLE_ = "ROLE_";    public void initAssumed(){        String userListJsonStr = userActivitiFromService.userByDepartDetailIdAndAccountbookId(accountbookId, departDetailId);        List<TSUser> userList = JsonUtils.jsonToList(userListJsonStr, TSUser.class);        String[][] usersGroupsAndRoles = {                {"salaboy", "password", "ROLE_ACTIVITI_USER", "GROUP_activitiTeam"},                {"ryandawsonuk", "password", "ROLE_ACTIVITI_USER", "GROUP_activitiTeam"},                {"erdemedeiros", "password", "ROLE_ACTIVITI_USER", "GROUP_activitiTeam"},                {"other", "password", "ROLE_ACTIVITI_USER", "GROUP_otherTeam"},                {"admin", "password", "ROLE_ACTIVITI_ADMIN"},        };        // e.g.        // user : {"salaboy", "password", "ROLE_ACTIVITI_USER", "GROUP_activitiTeam"}        // user[0]:"salaboy"; user[1]:"password"        boolean flag = true;        String accountbookName = "000000-company-test";        String departName = "000000-department-test";        for (TSUser user:userList){            // 权限划分：角色保留（角色对应角色：ROLE_RoleCode_RoleName）；部门分组（公司名称+部门名称:GROUP_AccountbookName_DepartDetail.Depart.DepartName）            if(flag) {                accountbookName = user.getUserAccountbookSet().stream().findFirst().get().getAccountbook().getAccountbookName();                System.out.println("accountbookName:" + accountbookName);                departName = user.getUserDepartDetailSet().stream().findFirst().get().getDepartDetail().getDepart().getDepartName();                flag = false;            }            List<String> roleStrList = user.getRoleSet().stream().map(r -> {                return ROLE_+r.getRoleName();            }).collect(Collectors.toList());            String pre = accountbookName+"-"+departName;            List<SimpleGrantedAuthority> simpleGrantedAuthorities = user.getRoleSet().stream().map(u -> {                String simpleGrantedAuthorityStr = pre + u.getRoleCode() + u.getRoleName();                SimpleGrantedAuthority simpleGrantedAuthority = new SimpleGrantedAuthority(pre + u.getRoleCode() + u.getRoleName());                return simpleGrantedAuthority;            }).collect(Collectors.toList());            jdbcLocalUserDetailsManager.createUser(new User(user.getEmpNo()+"@"+user.getUserName(), new BCryptPasswordEncoder().encode("123456"),                    simpleGrantedAuthorities));        }    }    public void clearUsers(){//        accountbookId = "2c91e3ec6ad89cfb016ae46f3b10066c";        String userListJsonStr = userActivitiFromService.userByDepartDetailIdAndAccountbookId(accountbookId, departDetailId);        List<TSUser> userList = JsonUtils.jsonToList(userListJsonStr, TSUser.class);        for (TSUser user:userList){            jdbcLocalUserDetailsManager.deleteUser(user.getEmpNo()+"@"+user.getUserName());        }    }    public void insertIntoAssumedTable(String empNo, String username){        boolean isExist = jdbcLocalUserDetailsManager.userExists(empNo +"@"+ username);        if(!isExist){            String userJsonStr = userActivitiFromService.userByEmpNo(empNo);            TSUser user = JsonUtils.jsonToPojo(userJsonStr, TSUser.class);            String accountbookName = user.getUserAccountbookSet().stream().findFirst().get().getAccountbook().getAccountbookName();            String departName = user.getUserDepartDetailSet().stream().findFirst().get().getDepartDetail().getDepart().getDepartName();            String pre = accountbookName+"-"+departName;            List<SimpleGrantedAuthority> simpleGrantedAuthorities = user.getRoleSet().stream().map(u -> {                return new SimpleGrantedAuthority(pre + u.getRoleCode() + u.getRoleName());            }).collect(Collectors.toList());            jdbcLocalUserDetailsManager.createUser(new User(user.getEmpNo()+"@"+user.getUserName(), new BCryptPasswordEncoder().encode("123456"),                    simpleGrantedAuthorities));        }    }}